# Generated by Django 5.1.3 on 2025-10-03 11:24

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProjectTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='tag name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('color', models.CharField(default='#6c757d', max_length=7, verbose_name='color code')),
            ],
            options={
                'verbose_name': 'project tag',
                'verbose_name_plural': 'project tags',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='project name')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='slug')),
                ('description', models.TextField(verbose_name='description')),
                ('project_type', models.CharField(choices=[('web_application', 'Web Application'), ('mobile_app', 'Mobile Application'), ('desktop_app', 'Desktop Application'), ('api', 'API/Service'), ('data_science', 'Data Science Project'), ('machine_learning', 'Machine Learning Project'), ('game', 'Game Development'), ('other', 'Other')], max_length=30, verbose_name='project type')),
                ('programming_language', models.CharField(choices=[('python', 'Python'), ('javascript', 'JavaScript'), ('typescript', 'TypeScript'), ('java', 'Java'), ('csharp', 'C#'), ('cpp', 'C++'), ('php', 'PHP'), ('ruby', 'Ruby'), ('go', 'Go'), ('rust', 'Rust'), ('swift', 'Swift'), ('kotlin', 'Kotlin'), ('other', 'Other')], max_length=30, verbose_name='primary language')),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('in_progress', 'In Progress'), ('review', 'Under Review'), ('completed', 'Completed'), ('on_hold', 'On Hold'), ('cancelled', 'Cancelled')], default='planning', max_length=20, verbose_name='status')),
                ('visibility', models.CharField(choices=[('private', 'Private'), ('team', 'Team Only'), ('public', 'Public')], default='private', max_length=20, verbose_name='visibility')),
                ('github_url', models.URLField(blank=True, verbose_name='GitHub URL')),
                ('gitlab_url', models.URLField(blank=True, verbose_name='GitLab URL')),
                ('repository_provider', models.CharField(choices=[('github', 'GitHub'), ('gitlab', 'GitLab'), ('bitbucket', 'Bitbucket'), ('none', 'No Integration')], default='none', max_length=20, verbose_name='repository provider')),
                ('allow_forking', models.BooleanField(default=False, verbose_name='allow forking')),
                ('require_approval', models.BooleanField(default=False, verbose_name='require approval for changes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='started at')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='completed at')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_projects', to=settings.AUTH_USER_MODEL, verbose_name='project owner')),
                ('technologies', models.ManyToManyField(blank=True, related_name='used_in_projects', to='accounts.skill', verbose_name='technologies used')),
            ],
            options={
                'verbose_name': 'project',
                'verbose_name_plural': 'projects',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CodeReview',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='review title')),
                ('description', models.TextField(verbose_name='review description')),
                ('files_changed', models.JSONField(default=list, verbose_name='files changed')),
                ('diff_content', models.TextField(blank=True, verbose_name='diff content')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('in_review', 'In Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('changes_requested', 'Changes Requested')], default='pending', max_length=20, verbose_name='status')),
                ('branch_name', models.CharField(blank=True, max_length=100, verbose_name='branch name')),
                ('commit_hash', models.CharField(blank=True, max_length=40, verbose_name='commit hash')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('reviewed_at', models.DateTimeField(blank=True, null=True, verbose_name='reviewed at')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_reviews', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='code_reviews', to='projects.project', verbose_name='project')),
            ],
            options={
                'verbose_name': 'code review',
                'verbose_name_plural': 'code reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('activity_type', models.CharField(choices=[('project_created', 'Project Created'), ('member_added', 'Member Added'), ('member_removed', 'Member Removed'), ('task_created', 'Task Created'), ('task_updated', 'Task Updated'), ('task_completed', 'Task Completed'), ('file_uploaded', 'File Uploaded'), ('file_updated', 'File Updated'), ('review_created', 'Review Created'), ('review_approved', 'Review Approved'), ('comment_added', 'Comment Added')], max_length=30, verbose_name='activity type')),
                ('description', models.TextField(verbose_name='description')),
                ('metadata', models.JSONField(default=dict, verbose_name='metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='projects.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'project activity',
                'verbose_name_plural': 'project activities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectFile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file', models.FileField(upload_to='project_files/', verbose_name='file')),
                ('filename', models.CharField(max_length=255, verbose_name='filename')),
                ('file_path', models.CharField(max_length=500, verbose_name='file path')),
                ('file_size', models.BigIntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='file size')),
                ('mime_type', models.CharField(max_length=100, verbose_name='MIME type')),
                ('file_extension', models.CharField(max_length=10, verbose_name='file extension')),
                ('version', models.IntegerField(default=1, verbose_name='version')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('category', models.CharField(choices=[('source_code', 'Source Code'), ('documentation', 'Documentation'), ('design', 'Design Assets'), ('configuration', 'Configuration'), ('data', 'Data Files'), ('other', 'Other')], default='other', max_length=30, verbose_name='category')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='uploaded at')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='modified at')),
                ('parent_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='next_versions', to='projects.projectfile')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='projects.project', verbose_name='project')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_files', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'project file',
                'verbose_name_plural': 'project files',
                'ordering': ['file_path', '-version'],
            },
        ),
        migrations.CreateModel(
            name='ProjectMembership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('viewer', 'Viewer'), ('member', 'Member'), ('editor', 'Editor'), ('admin', 'Administrator')], default='member', max_length=20, verbose_name='role')),
                ('joined_at', models.DateTimeField(auto_now_add=True, verbose_name='joined at')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('invited_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_invitations_sent', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='projects.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'project membership',
                'verbose_name_plural': 'project memberships',
                'unique_together': {('project', 'user')},
            },
        ),
        migrations.AddField(
            model_name='project',
            name='team_members',
            field=models.ManyToManyField(blank=True, related_name='team_projects', through='projects.ProjectMembership', to=settings.AUTH_USER_MODEL, verbose_name='team members'),
        ),
        migrations.AddField(
            model_name='project',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='projects', to='projects.projecttag', verbose_name='tags'),
        ),
        migrations.CreateModel(
            name='ReviewAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('changes_requested', 'Changes Requested')], default='pending', max_length=20, verbose_name='status')),
                ('comments', models.TextField(blank=True, verbose_name='reviewer comments')),
                ('assigned_at', models.DateTimeField(auto_now_add=True, verbose_name='assigned at')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='completed at')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='projects.codereview')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'review assignment',
                'verbose_name_plural': 'review assignments',
                'unique_together': {('review', 'reviewer')},
            },
        ),
        migrations.AddField(
            model_name='codereview',
            name='reviewers',
            field=models.ManyToManyField(blank=True, related_name='assigned_reviews', through='projects.ReviewAssignment', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ReviewComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('comment_text', models.TextField(verbose_name='comment')),
                ('file_path', models.CharField(blank=True, max_length=500, verbose_name='file path')),
                ('line_number', models.IntegerField(blank=True, null=True, verbose_name='line number')),
                ('comment_type', models.CharField(choices=[('general', 'General Comment'), ('suggestion', 'Suggestion'), ('issue', 'Issue'), ('praise', 'Praise')], default='general', max_length=20, verbose_name='comment type')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_comments', to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='projects.codereview')),
            ],
            options={
                'verbose_name': 'review comment',
                'verbose_name_plural': 'review comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskLabel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='label name')),
                ('color', models.CharField(default='#007bff', max_length=7, verbose_name='color code')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('project', models.ForeignKey(blank=True, help_text='Leave blank for global labels', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='available_labels', to='projects.project')),
            ],
            options={
                'verbose_name': 'task label',
                'verbose_name_plural': 'task labels',
            },
        ),
        migrations.CreateModel(
            name='ProjectTask',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='task title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('status', models.CharField(choices=[('todo', 'To Do'), ('in_progress', 'In Progress'), ('review', 'Under Review'), ('testing', 'Testing'), ('completed', 'Completed'), ('blocked', 'Blocked')], default='todo', max_length=20, verbose_name='status')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20, verbose_name='priority')),
                ('task_type', models.CharField(choices=[('feature', 'Feature'), ('bug', 'Bug Fix'), ('enhancement', 'Enhancement'), ('documentation', 'Documentation'), ('testing', 'Testing'), ('deployment', 'Deployment'), ('other', 'Other')], default='feature', max_length=30, verbose_name='task type')),
                ('estimated_hours', models.DecimalField(blank=True, decimal_places=1, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0.1)], verbose_name='estimated hours')),
                ('actual_hours', models.DecimalField(blank=True, decimal_places=1, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='actual hours')),
                ('order', models.IntegerField(default=0, verbose_name='order')),
                ('column_order', models.IntegerField(default=0, verbose_name='column order')),
                ('due_date', models.DateField(blank=True, null=True, verbose_name='due date')),
                ('is_overdue', models.BooleanField(default=False, verbose_name='overdue')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='started at')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='completed at')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL, verbose_name='assigned to')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tasks', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='projects.project', verbose_name='project')),
                ('labels', models.ManyToManyField(blank=True, related_name='tasks', to='projects.tasklabel', verbose_name='labels')),
            ],
            options={
                'verbose_name': 'project task',
                'verbose_name_plural': 'project tasks',
                'ordering': ['order', 'created_at'],
            },
        ),
    ]
