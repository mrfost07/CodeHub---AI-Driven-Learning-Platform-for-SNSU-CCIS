# Generated by Django 5.1.3 on 2025-10-03 11:27

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('learning', '0001_initial'),
        ('projects', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIChatSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='session title')),
                ('session_type', models.CharField(choices=[('general_mentoring', 'General Mentoring'), ('code_review', 'Code Review'), ('debugging_help', 'Debugging Help'), ('project_guidance', 'Project Guidance'), ('learning_recommendation', 'Learning Recommendation'), ('career_advice', 'Career Advice'), ('technical_question', 'Technical Question')], default='general_mentoring', max_length=30, verbose_name='session type')),
                ('programming_language', models.CharField(blank=True, choices=[('python', 'Python'), ('javascript', 'JavaScript'), ('typescript', 'TypeScript'), ('java', 'Java'), ('csharp', 'C#'), ('cpp', 'C++'), ('php', 'PHP'), ('ruby', 'Ruby'), ('go', 'Go'), ('rust', 'Rust'), ('swift', 'Swift'), ('kotlin', 'Kotlin'), ('sql', 'SQL'), ('html_css', 'HTML/CSS'), ('other', 'Other')], max_length=30, null=True, verbose_name='programming language')),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('archived', 'Archived')], default='active', max_length=20, verbose_name='status')),
                ('total_messages', models.IntegerField(default=0, verbose_name='total messages')),
                ('ai_model_used', models.CharField(default='gpt-4', max_length=50, verbose_name='AI model')),
                ('tokens_used', models.IntegerField(default=0, verbose_name='tokens used')),
                ('cost_estimate', models.DecimalField(decimal_places=4, default=0, max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='cost estimate')),
                ('temperature', models.DecimalField(decimal_places=2, default=0.7, help_text='Controls randomness in AI responses (0-2)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)], verbose_name='temperature')),
                ('max_tokens', models.IntegerField(default=2000, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(4000)], verbose_name='max tokens per response')),
                ('user_rating', models.IntegerField(blank=True, help_text='User satisfaction rating (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='user rating')),
                ('feedback_text', models.TextField(blank=True, verbose_name='feedback')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('last_activity', models.DateTimeField(auto_now_add=True, verbose_name='last activity')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='completed at')),
                ('related_module', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ai_sessions', to='learning.learningmodule', verbose_name='related module')),
                ('related_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ai_sessions', to='projects.project', verbose_name='related project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_chat_sessions', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'AI chat session',
                'verbose_name_plural': 'AI chat sessions',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='AIMentorProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('preferred_ai_model', models.CharField(choices=[('gpt-4', 'GPT-4'), ('gpt-3.5-turbo', 'GPT-3.5 Turbo')], default='gpt-4', max_length=50, verbose_name='preferred AI model')),
                ('preferred_temperature', models.DecimalField(decimal_places=2, default=0.7, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)], verbose_name='preferred temperature')),
                ('preferred_difficulty', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('mixed', 'Mixed')], default='intermediate', max_length=20, verbose_name='preferred difficulty')),
                ('communication_style', models.CharField(choices=[('formal', 'Formal'), ('casual', 'Casual'), ('technical', 'Technical'), ('mentor_like', 'Mentor-like')], default='mentor_like', max_length=20, verbose_name='communication style')),
                ('code_explanation_level', models.CharField(choices=[('simple', 'Simple'), ('detailed', 'Detailed'), ('expert', 'Expert')], default='detailed', max_length=20, verbose_name='code explanation level')),
                ('enable_code_analysis', models.BooleanField(default=True, verbose_name='enable code analysis')),
                ('enable_learning_recommendations', models.BooleanField(default=True, verbose_name='enable learning recommendations')),
                ('enable_project_guidance', models.BooleanField(default=True, verbose_name='enable project guidance')),
                ('daily_message_limit', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(200)], verbose_name='daily message limit')),
                ('messages_today', models.IntegerField(default=0, verbose_name='messages today')),
                ('last_reset_date', models.DateField(auto_now=True, verbose_name='last reset date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('learning_goals', models.ManyToManyField(blank=True, related_name='ai_mentor_profiles', to='accounts.careerinterest', verbose_name='learning goals')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_mentor_profile', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'AI mentor profile',
                'verbose_name_plural': 'AI mentor profiles',
            },
        ),
        migrations.CreateModel(
            name='AIMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('user', 'User'), ('assistant', 'AI Assistant'), ('system', 'System')], max_length=20, verbose_name='message role')),
                ('content', models.TextField(verbose_name='message content')),
                ('metadata', models.JSONField(default=dict, help_text='Additional message data', verbose_name='metadata')),
                ('tokens_used', models.IntegerField(default=0, verbose_name='tokens used')),
                ('processing_time', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='processing time (seconds)')),
                ('contains_code', models.BooleanField(default=False, verbose_name='contains code')),
                ('code_language', models.CharField(blank=True, max_length=30, verbose_name='code language')),
                ('code_snippet', models.TextField(blank=True, verbose_name='code snippet')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='ai_mentor.aichatsession', verbose_name='session')),
            ],
            options={
                'verbose_name': 'AI message',
                'verbose_name_plural': 'AI messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='CodeAnalysis',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code_snippet', models.TextField(verbose_name='code snippet')),
                ('programming_language', models.CharField(max_length=30, verbose_name='programming language')),
                ('file_name', models.CharField(blank=True, max_length=255, verbose_name='file name')),
                ('analysis_type', models.CharField(choices=[('bug_detection', 'Bug Detection'), ('performance', 'Performance Analysis'), ('security', 'Security Audit'), ('best_practices', 'Best Practices'), ('complexity', 'Complexity Analysis'), ('comprehensive', 'Comprehensive Review')], max_length=30, verbose_name='analysis type')),
                ('findings', models.JSONField(default=list, verbose_name='findings')),
                ('recommendations', models.JSONField(default=list, verbose_name='recommendations')),
                ('severity_score', models.IntegerField(help_text='Overall severity (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='severity score')),
                ('ai_model_used', models.CharField(default='gpt-4', max_length=50, verbose_name='AI model')),
                ('tokens_used', models.IntegerField(default=0, verbose_name='tokens used')),
                ('processing_time', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True, verbose_name='processing time (seconds)')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20, verbose_name='status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='completed at')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='code_analyses', to='ai_mentor.aichatsession', verbose_name='session')),
            ],
            options={
                'verbose_name': 'code analysis',
                'verbose_name_plural': 'code analyses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LearningRecommendation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recommendation_type', models.CharField(choices=[('career_path', 'Career Path'), ('learning_module', 'Learning Module'), ('skill_development', 'Skill Development'), ('project_idea', 'Project Idea'), ('certification', 'Certification'), ('resource', 'Learning Resource')], max_length=30, verbose_name='recommendation type')),
                ('title', models.CharField(max_length=200, verbose_name='recommendation title')),
                ('description', models.TextField(verbose_name='description')),
                ('reason', models.TextField(help_text='Why this was recommended', verbose_name='reason for recommendation')),
                ('external_url', models.URLField(blank=True, verbose_name='external URL')),
                ('resource_type', models.CharField(blank=True, choices=[('documentation', 'Documentation'), ('tutorial', 'Tutorial'), ('course', 'Online Course'), ('book', 'Book'), ('video', 'Video'), ('practice', 'Practice Platform'), ('tool', 'Tool/Software')], max_length=30, verbose_name='resource type')),
                ('confidence_score', models.DecimalField(decimal_places=2, help_text='AI confidence in this recommendation (0-1)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='confidence score')),
                ('priority_score', models.IntegerField(default=5, help_text='Recommendation priority (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='priority score')),
                ('is_viewed', models.BooleanField(default=False, verbose_name='viewed')),
                ('is_dismissed', models.BooleanField(default=False, verbose_name='dismissed')),
                ('user_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='user rating')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('viewed_at', models.DateTimeField(blank=True, null=True, verbose_name='viewed at')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='expires at')),
                ('recommended_career_path', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recommendations', to='learning.careerpath', verbose_name='recommended career path')),
                ('recommended_module', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recommendations', to='learning.learningmodule', verbose_name='recommended module')),
                ('recommended_skill', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recommendations', to='accounts.skill', verbose_name='recommended skill')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recommendations', to='ai_mentor.aichatsession', verbose_name='session')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_recommendations', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'learning recommendation',
                'verbose_name_plural': 'learning recommendations',
                'ordering': ['-priority_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectGuidance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('guidance_type', models.CharField(choices=[('architecture', 'Architecture Design'), ('technology_stack', 'Technology Stack'), ('project_structure', 'Project Structure'), ('best_practices', 'Best Practices'), ('optimization', 'Performance Optimization'), ('security', 'Security Guidelines'), ('deployment', 'Deployment Strategy')], max_length=30, verbose_name='guidance type')),
                ('title', models.CharField(max_length=200, verbose_name='guidance title')),
                ('content', models.TextField(verbose_name='guidance content')),
                ('recommendations', models.JSONField(default=list, verbose_name='recommendations')),
                ('implementation_steps', models.JSONField(default=list, verbose_name='implementation steps')),
                ('estimated_effort', models.CharField(choices=[('low', 'Low (1-2 hours)'), ('medium', 'Medium (3-8 hours)'), ('high', 'High (1-3 days)'), ('very_high', 'Very High (1+ weeks)')], default='medium', max_length=20, verbose_name='estimated effort')),
                ('complexity_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='intermediate', max_length=20, verbose_name='complexity level')),
                ('is_implemented', models.BooleanField(default=False, verbose_name='implemented')),
                ('user_feedback', models.TextField(blank=True, verbose_name='user feedback')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('implemented_at', models.DateTimeField(blank=True, null=True, verbose_name='implemented at')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_guidance', to='projects.project', verbose_name='project')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_guidance', to='ai_mentor.aichatsession', verbose_name='session')),
            ],
            options={
                'verbose_name': 'project guidance',
                'verbose_name_plural': 'project guidance',
                'ordering': ['-created_at'],
            },
        ),
    ]
