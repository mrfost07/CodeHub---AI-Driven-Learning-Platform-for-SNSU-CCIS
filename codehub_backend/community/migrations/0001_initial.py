# Generated by Django 5.1.3 on 2025-10-03 11:29

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('learning', '0001_initial'),
        ('projects', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Hashtag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='hashtag')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('usage_count', models.IntegerField(default=0, verbose_name='usage count')),
                ('last_used', models.DateTimeField(auto_now=True, verbose_name='last used')),
            ],
            options={
                'verbose_name': 'hashtag',
                'verbose_name_plural': 'hashtags',
                'ordering': ['-usage_count', '-last_used'],
            },
        ),
        migrations.CreateModel(
            name='PostTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='tag name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('color', models.CharField(default='#6c757d', max_length=7, verbose_name='color code')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
            ],
            options={
                'verbose_name': 'post tag',
                'verbose_name_plural': 'post tags',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField(verbose_name='comment content')),
                ('likes_count', models.IntegerField(default=0, verbose_name='likes count')),
                ('replies_count', models.IntegerField(default=0, verbose_name='replies count')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_moderated', models.BooleanField(default=False, verbose_name='moderated')),
                ('moderation_reason', models.TextField(blank=True, verbose_name='moderation reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('moderated_at', models.DateTimeField(blank=True, null=True, verbose_name='moderated at')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL, verbose_name='author')),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='community.comment', verbose_name='parent comment')),
            ],
            options={
                'verbose_name': 'comment',
                'verbose_name_plural': 'comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentMention',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='mentioned at')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mention_relations', to='community.comment')),
                ('mentioned_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_mentions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'comment mention',
                'verbose_name_plural': 'comment mentions',
                'unique_together': {('comment', 'mentioned_user')},
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='mentions',
            field=models.ManyToManyField(blank=True, related_name='mentioned_in_comments', through='community.CommentMention', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='post title')),
                ('content', models.TextField(verbose_name='post content')),
                ('content_type', models.CharField(choices=[('text', 'Text Only'), ('image', 'Image Post'), ('code', 'Code Snippet'), ('project', 'Project Showcase'), ('question', 'Question'), ('announcement', 'Announcement'), ('mixed', 'Mixed Content')], default='text', max_length=20, verbose_name='content type')),
                ('image', models.ImageField(blank=True, null=True, upload_to='post_images/', verbose_name='featured image')),
                ('code_snippet', models.TextField(blank=True, verbose_name='code snippet')),
                ('code_language', models.CharField(blank=True, max_length=30, verbose_name='code language')),
                ('likes_count', models.IntegerField(default=0, verbose_name='likes count')),
                ('comments_count', models.IntegerField(default=0, verbose_name='comments count')),
                ('shares_count', models.IntegerField(default=0, verbose_name='shares count')),
                ('views_count', models.IntegerField(default=0, verbose_name='views count')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('hidden', 'Hidden'), ('moderated', 'Under Moderation'), ('removed', 'Removed')], default='draft', max_length=20, verbose_name='status')),
                ('is_pinned', models.BooleanField(default=False, verbose_name='pinned')),
                ('is_featured', models.BooleanField(default=False, verbose_name='featured')),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('followers', 'Followers Only'), ('private', 'Private')], default='public', max_length=20, verbose_name='visibility')),
                ('moderation_reason', models.TextField(blank=True, verbose_name='moderation reason')),
                ('moderated_at', models.DateTimeField(blank=True, null=True, verbose_name='moderated at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='published at')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL, verbose_name='author')),
                ('hashtags', models.ManyToManyField(blank=True, related_name='posts', to='community.hashtag', verbose_name='hashtags')),
                ('moderated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_posts', to=settings.AUTH_USER_MODEL)),
                ('related_module', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_posts', to='learning.learningmodule', verbose_name='related module')),
                ('related_project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_posts', to='projects.project', verbose_name='related project')),
                ('tags', models.ManyToManyField(blank=True, related_name='posts', to='community.posttag', verbose_name='tags')),
            ],
            options={
                'verbose_name': 'post',
                'verbose_name_plural': 'posts',
                'ordering': ['-is_pinned', '-published_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('post_like', 'Post Liked'), ('comment', 'New Comment'), ('comment_reply', 'Comment Reply'), ('comment_mention', 'Mentioned in Comment'), ('post_mention', 'Mentioned in Post'), ('project_invitation', 'Project Invitation'), ('project_update', 'Project Update'), ('achievement', 'Achievement Unlocked'), ('follow', 'New Follower'), ('system', 'System Notification')], max_length=30, verbose_name='notification type')),
                ('title', models.CharField(max_length=200, verbose_name='notification title')),
                ('message', models.TextField(verbose_name='notification message')),
                ('is_read', models.BooleanField(default=False, verbose_name='read')),
                ('is_sent', models.BooleanField(default=False, verbose_name='sent')),
                ('action_url', models.URLField(blank=True, verbose_name='action URL')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='read at')),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL, verbose_name='actor')),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='community.comment')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='projects.project')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='recipient')),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='community.post')),
            ],
            options={
                'verbose_name': 'notification',
                'verbose_name_plural': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='community.post', verbose_name='post'),
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_type', models.CharField(choices=[('spam', 'Spam'), ('harassment', 'Harassment'), ('inappropriate', 'Inappropriate Content'), ('copyright', 'Copyright Infringement'), ('misinformation', 'Misinformation'), ('other', 'Other')], max_length=30, verbose_name='report type')),
                ('description', models.TextField(verbose_name='report description')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('investigating', 'Under Investigation'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='pending', max_length=20, verbose_name='status')),
                ('moderation_notes', models.TextField(blank=True, verbose_name='moderation notes')),
                ('action_taken', models.TextField(blank=True, verbose_name='action taken')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='resolved at')),
                ('moderated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_reports', to=settings.AUTH_USER_MODEL)),
                ('reported_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='community.comment')),
                ('reported_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='community.post')),
                ('reported_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_reports', to=settings.AUTH_USER_MODEL)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'report',
                'verbose_name_plural': 'reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='liked at')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='community.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'comment like',
                'verbose_name_plural': 'comment likes',
                'unique_together': {('comment', 'user')},
            },
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='liked at')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='community.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'post like',
                'verbose_name_plural': 'post likes',
                'unique_together': {('post', 'user')},
            },
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='followed at')),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_relations', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower_relations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user follow',
                'verbose_name_plural': 'user follows',
                'unique_together': {('follower', 'following')},
            },
        ),
    ]
