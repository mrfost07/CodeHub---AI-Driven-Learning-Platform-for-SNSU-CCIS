# Generated by Django 5.1.3 on 2025-10-03 11:14

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_text', models.TextField(verbose_name='question text')),
                ('question_type', models.CharField(choices=[('multiple_choice', 'Multiple Choice'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('code_completion', 'Code Completion'), ('multiple_select', 'Multiple Select')], max_length=20, verbose_name='question type')),
                ('code_snippet', models.TextField(blank=True, help_text='Code for code-related questions', verbose_name='code snippet')),
                ('explanation', models.TextField(blank=True, help_text='Explanation shown after answering', verbose_name='explanation')),
                ('points', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='points')),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=20, verbose_name='difficulty level')),
                ('order', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='order')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'question',
                'verbose_name_plural': 'questions',
                'ordering': ['quiz', 'order'],
            },
        ),
        migrations.CreateModel(
            name='CareerPath',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='career path name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='slug')),
                ('description', models.TextField(verbose_name='description')),
                ('program_type', models.CharField(choices=[('bsit', 'Bachelor of Science in Information Technology'), ('bscs', 'Bachelor of Science in Computer Science'), ('bsis', 'Bachelor of Science in Information Systems')], max_length=20, verbose_name='program type')),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20, verbose_name='difficulty level')),
                ('estimated_duration', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(52)], verbose_name='estimated duration (weeks)')),
                ('total_modules', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='total modules')),
                ('points_reward', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(0)], verbose_name='points reward')),
                ('icon', models.CharField(help_text='CSS icon class or emoji', max_length=50, verbose_name='icon class')),
                ('color', models.CharField(default='#007bff', help_text='Hex color code', max_length=7, verbose_name='color code')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_featured', models.BooleanField(default=False, verbose_name='featured')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('prerequisites', models.ManyToManyField(blank=True, help_text='Career paths that must be completed before this one', related_name='leads_to', to='learning.careerpath')),
                ('required_skills', models.ManyToManyField(blank=True, help_text='Skills required to start this career path', related_name='required_for_paths', to='accounts.skill')),
            ],
            options={
                'verbose_name': 'career path',
                'verbose_name_plural': 'career paths',
                'ordering': ['program_type', 'difficulty_level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='LearningModule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='module title')),
                ('slug', models.SlugField(max_length=200, verbose_name='slug')),
                ('description', models.TextField(verbose_name='description')),
                ('module_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='module number')),
                ('content_type', models.CharField(choices=[('video', 'Video Content'), ('text', 'Text Content'), ('interactive', 'Interactive Content'), ('mixed', 'Mixed Content')], max_length=20, verbose_name='content type')),
                ('video_url', models.URLField(blank=True, help_text='YouTube, Vimeo, or direct video URL', verbose_name='video URL')),
                ('video_duration', models.IntegerField(blank=True, null=True, verbose_name='video duration (minutes)')),
                ('content_text', models.TextField(blank=True, verbose_name='content text')),
                ('attachments', models.FileField(blank=True, upload_to='module_attachments/', verbose_name='attachments')),
                ('learning_objectives', models.TextField(help_text='What students will learn', verbose_name='learning objectives')),
                ('key_takeaways', models.TextField(blank=True, help_text='Main points to remember', verbose_name='key takeaways')),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20, verbose_name='difficulty level')),
                ('estimated_time', models.IntegerField(validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(480)], verbose_name='estimated time (minutes)')),
                ('has_quiz', models.BooleanField(default=True, verbose_name='has quiz')),
                ('passing_score', models.IntegerField(default=70, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='passing score (%)')),
                ('points_reward', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0)], verbose_name='points reward')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_preview', models.BooleanField(default=False, verbose_name='preview available')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('career_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='learning.careerpath', verbose_name='career path')),
                ('prerequisites', models.ManyToManyField(blank=True, help_text='Modules that must be completed before this one', related_name='leads_to_modules', to='learning.learningmodule')),
            ],
            options={
                'verbose_name': 'learning module',
                'verbose_name_plural': 'learning modules',
                'ordering': ['career_path', 'module_number'],
                'unique_together': {('career_path', 'module_number')},
            },
        ),
        migrations.CreateModel(
            name='QuestionChoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('choice_text', models.CharField(max_length=500, verbose_name='choice text')),
                ('is_correct', models.BooleanField(default=False, verbose_name='correct answer')),
                ('explanation', models.TextField(blank=True, verbose_name='explanation')),
                ('order', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='order')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='learning.question', verbose_name='question')),
            ],
            options={
                'verbose_name': 'question choice',
                'verbose_name_plural': 'question choices',
                'ordering': ['question', 'order'],
                'unique_together': {('question', 'order')},
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='quiz title')),
                ('description', models.TextField(blank=True, verbose_name='quiz description')),
                ('instructions', models.TextField(blank=True, verbose_name='instructions')),
                ('time_limit', models.IntegerField(blank=True, help_text='Leave blank for no time limit', null=True, verbose_name='time limit (minutes)')),
                ('max_attempts', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='maximum attempts')),
                ('passing_score', models.IntegerField(default=70, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='passing score (%)')),
                ('randomize_questions', models.BooleanField(default=False, verbose_name='randomize questions')),
                ('questions_per_attempt', models.IntegerField(blank=True, help_text='Leave blank to show all questions', null=True, verbose_name='questions per attempt')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('available_from', models.DateTimeField(blank=True, null=True, verbose_name='available from')),
                ('available_until', models.DateTimeField(blank=True, null=True, verbose_name='available until')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('module', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quiz', to='learning.learningmodule', verbose_name='module')),
            ],
            options={
                'verbose_name': 'quiz',
                'verbose_name_plural': 'quizzes',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='learning.quiz', verbose_name='quiz'),
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='started at')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='completed at')),
                ('time_taken', models.IntegerField(blank=True, null=True, verbose_name='time taken (seconds)')),
                ('score', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='score (%)')),
                ('is_passed', models.BooleanField(default=False, verbose_name='passed')),
                ('is_completed', models.BooleanField(default=False, verbose_name='completed')),
                ('attempt_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='attempt number')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP address')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='learning.quiz', verbose_name='quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'quiz attempt',
                'verbose_name_plural': 'quiz attempts',
                'ordering': ['-started_at'],
                'unique_together': {('user', 'quiz', 'attempt_number')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='question',
            unique_together={('quiz', 'order')},
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('answer_text', models.TextField(blank=True, verbose_name='answer text')),
                ('is_correct', models.BooleanField(default=False, verbose_name='correct')),
                ('points_earned', models.IntegerField(default=0, verbose_name='points earned')),
                ('answered_at', models.DateTimeField(auto_now_add=True, verbose_name='answered at')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='learning.question', verbose_name='question')),
                ('selected_choices', models.ManyToManyField(blank=True, related_name='selected_answers', to='learning.questionchoice', verbose_name='selected choices')),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='learning.quizattempt', verbose_name='quiz attempt')),
            ],
            options={
                'verbose_name': 'answer',
                'verbose_name_plural': 'answers',
                'unique_together': {('attempt', 'question')},
            },
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_points_earned', models.IntegerField(default=0, verbose_name='total points earned')),
                ('is_completed', models.BooleanField(default=False, verbose_name='completed')),
                ('completion_date', models.DateTimeField(blank=True, null=True, verbose_name='completion date')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='started at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('career_path', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_progress', to='learning.careerpath', verbose_name='career path')),
                ('current_module', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_progress', to='learning.learningmodule', verbose_name='current module')),
                ('modules_completed', models.ManyToManyField(blank=True, related_name='completed_by_users', to='learning.learningmodule', verbose_name='completed modules')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='learning_progress', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user progress',
                'verbose_name_plural': 'user progress',
                'unique_together': {('user', 'career_path')},
            },
        ),
    ]
