# Generated by Django 5.1.3 on 2025-10-03 11:12

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='badge name')),
                ('description', models.TextField(verbose_name='description')),
                ('icon', models.CharField(help_text='CSS icon class or emoji', max_length=50, verbose_name='icon class')),
                ('badge_type', models.CharField(choices=[('learning', 'Learning Achievement'), ('project', 'Project Contribution'), ('community', 'Community Engagement'), ('skill', 'Skill Development'), ('special', 'Special Achievement')], max_length=20, verbose_name='badge type')),
                ('points_required', models.IntegerField(default=0, verbose_name='points required')),
                ('criteria', models.TextField(help_text='Description of how to earn this badge', verbose_name='criteria')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'badge',
                'verbose_name_plural': 'badges',
                'ordering': ['badge_type', 'points_required'],
            },
        ),
        migrations.CreateModel(
            name='CareerInterest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='interest name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('industry', models.CharField(choices=[('software_development', 'Software Development'), ('data_science', 'Data Science & Analytics'), ('cybersecurity', 'Cybersecurity'), ('networking', 'Networking & Infrastructure'), ('ui_ux_design', 'UI/UX Design'), ('project_management', 'Project Management'), ('consulting', 'IT Consulting'), ('academia', 'Academia & Research'), ('entrepreneurship', 'Entrepreneurship'), ('other', 'Other')], max_length=50, verbose_name='industry')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'career interest',
                'verbose_name_plural': 'career interests',
                'ordering': ['industry', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='skill name')),
                ('category', models.CharField(choices=[('programming', 'Programming Languages'), ('frameworks', 'Frameworks & Libraries'), ('databases', 'Databases'), ('tools', 'Tools & Software'), ('cloud', 'Cloud & DevOps'), ('design', 'Design & UI/UX'), ('other', 'Other')], max_length=30, verbose_name='category')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'skill',
                'verbose_name_plural': 'skills',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('instructor', 'Instructor'), ('student', 'Student'), ('guest', 'Guest'), ('moderator', 'Moderator')], default='student', help_text='User role determines permissions and access level', max_length=20, verbose_name='user role')),
                ('program', models.CharField(blank=True, choices=[('bsit', 'Bachelor of Science in Information Technology'), ('bscs', 'Bachelor of Science in Computer Science'), ('bsis', 'Bachelor of Science in Information Systems'), ('other', 'Other')], help_text='Academic program for students', max_length=50, null=True, verbose_name='academic program')),
                ('year_level', models.IntegerField(blank=True, help_text='Current year level (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='year level')),
                ('student_id', models.CharField(blank=True, help_text='Official student identification number', max_length=20, null=True, unique=True, verbose_name='student ID')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='biography')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='avatar')),
                ('github_username', models.CharField(blank=True, max_length=39, verbose_name='GitHub username')),
                ('linkedin_url', models.URLField(blank=True, verbose_name='LinkedIn URL')),
                ('portfolio_url', models.URLField(blank=True, verbose_name='portfolio URL')),
                ('points', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='points')),
                ('level', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='level')),
                ('is_verified', models.BooleanField(default=False, verbose_name='verified')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('following', models.ManyToManyField(blank=True, help_text='Users this user is following', related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('badges', models.ManyToManyField(blank=True, help_text='Earned badges and achievements', related_name='users', to='accounts.badge', verbose_name='badges')),
                ('career_interests', models.ManyToManyField(blank=True, help_text='Career goals and interests', related_name='users', to='accounts.careerinterest', verbose_name='career interests')),
                ('skills', models.ManyToManyField(blank=True, help_text='Technical skills and competencies', related_name='users', to='accounts.skill', verbose_name='skills')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
